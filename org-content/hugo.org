#+STARTUP: content
#+options: author:nil
#+HUGO_BASE_DIR: ../
#+hugo_level_offset: 0


* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
** TODO Python Script to Self-Destruct a GCP Virtual Machine
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: python-script-to-self-destruct-a-gcp-virtual-machine
:EXPORT_FILE_NAME: index
:END:
** TODO React Redux Firestore Infinite Scrolling
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: react-redux-firestore-infinite-scrolling
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-29 Tue 17:23]--[2020-09-29 Tue 17:43] =>  0:20
:END:

Recently I implemented infinite scrolling at [[https://artif.ai][Artifai]] with react-redux-firebase. It's not too difficult but it's helpful to work off of an example.

See below the component where the querying takes place.

#+begin_src js
export default () => {
  const firestore = useFirestore();
  const [recentArtifaications, setRecentArtifaications] = React.useState([]);

  const loadMorePosts = () => {
    (async () => {
      let recentArtifaicationsQuery = firestore
        .collectionGroup("artifaications")
        .where("accessLevel", "==", "public")
        .where("percentProcessed", "==", 100)
          .orderBy("created", "desc").limit(15);

      recentArtifaications.length !== 0 &&
        recentArtifaicationsQuery.startAfter(
          recentArtifaications.slice(-1)[0]["created"]
        );

      let recentArtifaicationsSnapshot = [];
      const querySnapshot = await recentArtifaicationsQuery.get();

      querySnapshot.forEach((doc) => {
        recentArtifaicationsSnapshot.push({
          id: doc.id,
          ...doc.data(),
        });
      });

      setRecentArtifaications([
        ...recentArtifaications,
        ...recentArtifaicationsSnapshot,
      ]);
    })();
  };

  useEffect(() => {
    // call loadMorePosts on component mount
    loadMorePosts();
  }, []);

  return (
    <>
      <Typography variant="h2" style={{ marginTop: "150px" }} align="center">
        Explore Other's Creations
      </Typography>
      <TripleImageViewList
        feed={recentArtifaications}
        view="general"
        loadMorePosts={loadMorePosts}
      />
    </>
  );
};
#+end_src

The function =loadMorePosts= loads the next 15 posts from firestore. This method is called from =TripleImageViewList= seen below.

#+begin_src js
const TripleImageViewList = (props) => {
  console.log(props.feed);
  return (
    <>
      <br />
      {props.feed.map((tileData, index) => (
        <React.Fragment key={tileData.id}>
          <TripleImageCard
            tileData={tileData}
            index={index}
            cardHeight={cardHeight}
            view={props.view}
          />
          {(index === props.feed.length - 5 && (props.feed.length < 100)) && (
            <Waypoint onEnter={() => props.loadMorePosts()} />
          )}
        </React.Fragment>
      ))}
    </>
  );
};
#+end_src

Here we use the [[https://github.com/civiccc/react-waypoint][react-waypoint]] library to trigger the =loadMorePosts= when the user only has 5 cards left to see. Ta-da! You now have infinite scrolling in your React app.

Links:
- [[https://www.youtube.com/watch?v=9dRk3bxEbS8&t=371s][Infinite Scrolling with React Waypoint]]
- [[https://stackoverflow.com/questions/60789004/about-infinite-scroll-in-react-js-and-material-ui][Infinite Scroll in React.js]]

** DONE Trying Out Emacs Calendar                   :@Productivity:org_mode:
CLOSED: [2020-09-30 Wed 10:35]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: trying-out-emacs-calendar
:EXPORT_FILE_NAME: index
:END:

I was investigating emacs calendar options anc ame across [[https://github.com/kiwanami/emacs-calfw/][emacs-calfw]]. It's a nice package for viewing calendar items from howm, ical, cal, or org in a google calendar like format.

I was mainly interested in org calendar. To get up and running clone the emacs-calfw repo and add it to your load path. then require then relevant files:
#+begin_src elisp
  (add-to-list 'load-path "/home/gautierk/.emacs-conf/emacs-calfw")
  (require 'calfw)
  (require 'calfw-org)
#+end_src
Now to display the calendar his =SPC SPC= and run =cfw:open-org-calendar=. You should see something like the following if you're on spacemacs:

#+html: {{< image src="./emacs-calfw-view.png" >}}

Press =W= to display the weekly view.

#+html: {{< image src="./emacs-calfw-weekly-view.png" >}}

It's awesome that this package exists, but too bad that it doesn't display rectangles positioned and sized based on the time and duration of the event in the same way google calendar does.

** DONE Serving a React App on a Subroute With Express :@Software_Dev:React:Express:
CLOSED: [2020-10-01 Thu 10:15]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: serving-a-react-app-on-a-subroute-with-express
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-29 Tue 09:45]--[2020-09-29 Tue 10:37] =>  0:52
:END:

There will come a time when you are looking to serve a create react app on a subroute via express. Look no further!

*** Router "basename"
There are a few places you need to indicate the route you will be serving the app from. Setting "basename" is the "BrowserRouter" component will make sure the router works correctly.

#+begin_src js
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import { BrowserRouter } from "react-router-dom";
import * as serviceWorker from "./serviceWorker";

ReactDOM.render(
  <React.StrictMode>
    <BrowserRouter basename="/pun/dev/hpc_2">
      <App />
    </BrowserRouter>
  </React.StrictMode>,
  document.getElementById("root")
);
#+end_src

*** Package.json "homefolder"

#+begin_src json
{
  "homepage": "https://academic-login.rc.fas.harvard.edu/pun/dev/hpc_2",
}
#+end_src

This "homepage" value is exposed in the =process.env.PUBLIC_URL= variable at build time, so anywhere that you want to use a relative url, make sure to reference it like below:

#+begin_src js
useEffect(() => {
  axios
    .get(`${process.env.PUBLIC_URL}/api/sharedPartitionData`)
    .then((userSharedPartitionData) => {
      setSharedPartitionData(userSharedPartitionData.data);
    })
    .catch(function (error) {
      console.log(error);
    });
}, []);
#+end_src

*** Express configuration

Now you have your react app ready to go, and you're looking to serve it using express. The strategy is to store the react app in a subdirectory to the express app. See the following tree structure, where =client= is a react app:

#+begin_src 
.
├── app.js
├── client
│   ├── package.json
│   ├── public
│   │   ├── favicon.ico
│   │   ├── favicon.png
│   │   ├── index.html
│   │   ├── logo192.png
│   │   ├── logo512.png
│   │   ├── manifest.json
│   │   └── robots.txt
│   ├── src
│   │   ├── App.css
│   │   ├── App.js
│   │   ├── App.js.backup
│   │   ├── App.test.js
│   │   ├── components
│   │   │   ├── FairshareCardGrid.jsx
│   │   │   ├── FairshareTable.jsx
│   │   │   ├── PartitionCardGrid.jsx
│   │   │   ├── StorageCardGrid.jsx
│   │   │   └── TripleBar.jsx
│   │   ├── Fairshare.jsx
│   │   ├── Hello.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── logo.svg
│   │   ├── PrivatePartitions.jsx
│   │   ├── serviceWorker.js
│   │   ├── setupTests.js
│   │   ├── SharedPartitions.jsx
│   │   └── Storage.jsx
│   └── yarn.lock
├── package.json
├── README.md
├── yarn-error.log
└── yarn.lock
#+end_src

For the express app you just need a single =app.js= file. Set the =basename= in the =basename= variable.

#+begin_src js
  const express = require("express");
  const bodyParser = require("body-parser");
  const path = require("path");
  const app = express();
  const port = process.env.PORT || 5000;
  const basename = "/pun/dev/hpc_2";
  const apiBasename = basename + "/api";
  const username = process.env.USER || "";


  // expose the body portion of an incoming request stream on req.body 
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));

  // example api endpoint
  app.get(apiBasename + "/user", (req, res) => {
    res.json({ username: username });
  });

  // Serve any static files
  app.use(basename, express.static(path.join(__dirname, "client/build")));

  // Handle React routing, return all requests to React app
  app.get(basename + "/*", function (req, res) {
    res.sendFile(path.join(__dirname, "client/build", "index.html"));
  });

  app.listen(port, () => console.log(`Listening on port ${port}`));
#+end_src

You can see an example api endpoint at =`${basename}/api/user`=. It returns the username of the user running the express app.

*** Development

During development, you could rebuild the react app and serve it with express on port 5000 by running =node app.js=, but this requires rebuilding the react app everytim you want to visualize changes to the user experience. Instead you can use a reverse proxy from the react app to the express backend to speed up development. To accomplish this, add the following to your clientside =package.json=:

#+begin_src json
  {
    "proxy": "http://localhost:5000",
  }
#+end_src

This enables you to start the frontend by running =cd client && yarn start= and start the backend by running =node app.js=. The backend runs on port 5000. The frontend runs on port 3000 and proxies api requests to the backend.

Prepare a production build of the frontend with =cd client && yarn build=. Then you can run =node app.js= and the backend will serve the frontend.

Check out [[https://github.com/Ruborcalor/hpc-status-app][hpc-status-app]] for a working demo of a react app served on a subroute!

Links:
- [[https://medium.com/@svinkle/how-to-deploy-a-react-app-to-a-subdirectory-f694d46427c1][Deploying a react app to a subdirectory]]
- [[https://create-react-app.dev/docs/deployment/][Create react app deployment]]

** DONE Firestore Transactions with Python :@Software_Dev:firestore:python:firebase:
CLOSED: [2020-10-02 Fri 10:16]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: firestore-transactions-with-python
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-10-02 Fri 09:37]--[2020-10-02 Fri 10:08] =>  0:31
:END:

The documentation on writing firestore transactions with python is not especially extensive, so I figured I'd share what I learned when setting up transactions for my project [[https://artif.ai][Artifai]].

My goal was to pull an item from a queue collection, but I needed to avoid the scenario where two threads pull items from the queue at the same time. Transactions are perfect for this because you can ensure that no two machines pull the same item off the queue.

> In the case of a concurrent edit, Cloud Firestore runs the entire transaction again. For example, if a transaction reads documents and another client modifies any of those documents, Cloud Firestore retries the transaction. This feature ensures that the transaction runs on up-to-date and consistent data.

Here is how you create a transaction. Define a method with the =@firestore.transactional= decorator that has parameters for a transaction and a query reference.
#+begin_src python
  @firestore.transactional
  def claim_artifaication(transaction, queue_objects_ref):
      # query firestore
      queue_objects = queue_objects_ref.stream(transaction=transaction)

      # pull the document from the iterable
      next_item = None
      for doc in queue_objects:
          next_item = doc

      # if queue is empty return status code of 2
      if not next_item:
          return {"status": 2}


      # get information from the document
      next_item_data = next_item.to_dict()
      next_item_data["status"] = 0

      # delete the document and return the information
      transaction.delete(next_item.reference)
      return next_item_data
#+end_src

The goal of this transaction is to

1. read the last document from the queue
2. delete the document
3. return the information the document was storing

If this transaction is in progress and the queue collection gets modified (by another thread pulling an item from the queue), it will restart the transaction; this ensures that no two threads will pull the same item off of the queue. If there are no items left on the queue, the method returns a dictionary with status set to 2 (to be handled later in the program).

Great! We have now defined a transaction. In order to execute it you can do the following:

#+begin_src python
  import firebase_admin
  from firebase_admin import credentials, storage, firestore

  db = firestore.client()
  transaction = db.transaction()

  # initialize query
  queue_objects_ref = (
      db.collection("state")
      .document("artifaicationQueue")
      .collection("queueObjects")
      .order_by("created", direction="ASCENDING")
      .limit(1)
  )

  transaction_attempts = 0
  while True:
      try:
          # apply transaction
          next_item_data = claim_artifaication(transaction, queue_objects_ref)
          logging.debug("Successfully applied transaction")
          break
      except Exception as e:
          logging.error(f"Could not apply transaction. Error: {e}")
          time.sleep(5)
          transaction_attempts += 1
          if transaction_attempts > 20:
              db.collection("errors").document(str(uuid.uuid4())).set({
                  "exception": f"Could not apply artifaication claim transaction. Error: {e}",
                  "location": "Claim artifaication",
                  "time": str(datetime.now())
              })
              exit()
#+end_src

We create our =queue_objects_ref=, and then repeatedly try to execute the transaction in a =while True= loop. If the transaction fails, it throws an error which gets caught by the try except statement. If it isn't able to complete the transaction in 20 tries, it gives up and exits the program.

Hopefully this gives you an idea for how to build workflows with firestore transactions in python. Let me know if you have any comments or questions below!
** DONE Org Mode and Google Calendar :@Productivity:org_mode:google_calendar:
CLOSED: [2020-09-27 Sun 17:46]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: org-mode-and-google-calendar
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-25 Fri 10:15]--[2020-09-25 Fri 12:56] =>  2:41
:END:

I've been having an internal debate over org mode and google calendar. Normally I manage the scheduling of my courses using Google Calendar, but would it be better to use org mode instead?

*** Google Calendar Pros
- Great mobile support
- Reply "Yes" or "No" to event invitations
- Great display
- Reminders
- Share calendars with other people
- Color coding

*** Org Mode Pros
- Time tracking
- Note taking
- Vim bindings
- Less context switching
- The benefits of org

*** Deciding Questions
Don't need a perfect system. Looking for something good. If it ain't broke don't fix it.
- What am I missing by using org mode?

  I feel like I am missing shared calendars and a great weekly view.
- Are shared calendars valuable?

  My understanding is that they practically become a necessity once entering the work force. Personally, however, I currently have no use for them.
- Is a great weekly view valuable?

  It makes it easy to see conflicting events, and how they are spaced out throughout your day.

*** COMMENT LifeStyle
In answering these questions I think it's important to consider you own lifestyle.

Different modes:
- Student
  - Many deadlines
  - No shared calendar
- Worker
  - Fewer deadlines
  - Shared calendar

Personally I am a student so I will keep the student's needs in mind when making my decision. The main difference I see is that I don't have to worry about shared calendars as much.

*** Options
**** Separated
Use org mode for todos/deadlines and google calendar for scheduled events.

This allows you to get all the benefits of google calendar for scheduled events, and all the benefits of org mode for todos/deadlines. A potential downside is that this approach requires more context switching. You'll have to consult the org agenda and the google calendar at the same time in order to make sure that you aren't missing anything.

Time tracking becomes difficult, because if you want to time track an event from the calendar, you'll have to duplicate it into org. This might not be so bad though. My main events would be:
- lectures
- meetings

And it's not important to get fine grained time tracking to the specific meeting itself. A general task of =meetings= for a set of categories that I could clock to would suffice.

**** Synced
By using [[https://github.com/myuhe/org-gcal.el][org-gcal]], you can push events from org mode to google calendar, and pull them from google calendar to org mode.

In either case you get to take advantage of the google calendar view without giving up org mode, but there are some limitations to the integration.
- repeating org events
- coloring

You also have to deal with the potential headache of keeping everything synced up.

**** Isolated
Use org mode for everything and don't use google calendar

There are solutions like [[https://github.com/kiwanami/emacs-calfw/][emacs-calfw]] that try to implement a better calendar view for org mode. The experience is not as nice as google calendar though.

It can be problematic to completely give up google calendar. Shared calendars come to mind. It is hard to escape google calendar.

It's important to remember the main points of google calendars view:
- easily find event conflicts
- visualize the weekly schedule

Both of these points can be accomplished from the org agenda, but not as well.

***** COMMENT Reflect ont the problem
problem:
- don't go to appointment it gets left TODO. solution could be to mark it as done/cancelled, but i'm eventually going to get to it. 
- Then it also doesn't show future appointments which is problematic for the schedule. What about not using scheduled strategy? 
- Doesn't show in calendar after marking as done.

Google calendar is nice. I think that's the way.

*** Next Steps

Sometimes it's more effective to experiment then to theorize. After reflecting on the options I've decided I won't pursue the syncing strategy; dealing with syncing would produce a headache that outweights the potential benefits.

This leaves me deciding between isolated and separated. The main difference being that separated gives better weekly view, and isolated means "inline" notes for events.  At first I had an irrational fear of the separated approach, but now I am warming up to it. Even so, I'm gonna give the isolated appraoach a go for a couple weeks and see if I feel like I am missing anything.

Stay tuned by subscribing to the [[https://colekillian.com/index.xml][rss feed]] and feel free to leave a comment below!
** DONE Hacking Into My Computer After Getting Locked Out     :@Story:linux:
CLOSED: [2020-09-25 Fri 10:11]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: hacking-into-my-computer-after-getting-locked-out
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-25 Fri 09:25]--[2020-09-25 Fri 10:15] =>  0:50
:END:
*** Just a Normal Day

I updated all the packages on my system with =pacman -Syyu=. Didn't think much of it at the time.

Later in the day my computer froze when using bash to execute a python script I was developing (whoops).

After waiting a minute to see if my computer would recover, I initiated force shutdown.

I started up my computer as normal, but this time I couldn't login! It was disheartening to be shown =Password Incorrect= over and over. Caps lock is off, check. Try a couple keyboards, check.

*** Hacker Mode

At first I was scared that the script I ran had somehow changed my password. Off to the newbie corner I go :). Uh oh, I hadn't read the patch notes. Turns out updates to =PAM= and =PAMBASE= might prevent login. Other people were having the same problem, all I had to do was login with rescue mode!

I follow the instructions to boot rescue mode. i.e. pressing =e= on the grub screen to edit the boot parameters and adding the kernel option =systemd.unit=rescue.target=. I find myself in a terminal prompted for my root password; what's my root password again? This can't be good. How can I possibly login without my root password?!

Back to the newbie forums. Luckily I find someone with a similar problem. He was having trouble logging into rescue mode because he had never set the root password in the first place. Turns out the solution is to reset your root password without knowing your root password. I couldn't believe how easy the process was.

Instead of appending =systemd.unit=rescue.target= to the kernel params, I appended =init=/bin/bash=. This tells the computer to run =/bin/bash= as init rather than the system init and puts you into a root shell without being prompted for a password. Your root file system is mounted as read-only now, so the first step is to mount it as read/write: =mount -n -o remount,rw /=. Then use =passwd= to create a new password for the root user, =reboot -f=, and you are good to go!

> If you want to "fix" this, lock GRUB and your BIOS with a password and put your hard disk first in boot order. If someone else has physical access and can put the (non-encrypted) hard disk into another computer, you have lost anyway

After that I was able to successfully boot into rescue mode and fix the problems with PAM. I did the following:

#+begin_src bash
cd /etc/pam.d/
mv system-login system-login.backup
mv system-login.pacnew system-login
#+end_src

One final reboot to the computer, and here I am!

*** Final Thoughts

I was late for my 10 oclock shutdown because of this, but thank god I'm back. This could have been quite a disaster; I'll be backing up my pc tomorrow.

This is the first time I've ever had a "breaking change" with manjaro, but it was my fault and could have been prevented by reading the update notes. Live and learn.

Mentioned links:
- [[https://unix.stackexchange.com/questions/34462/why-does-linux-allow-init-bin-bash][Why does linux allow init bin bash]]
- [[https://forum.manjaro.org/t/cant-login-after-update/16231][Can't login after update]]
- [[https://forum.manjaro.org/t/stable-update-2020-08-28-kernels-systemd-pam-pambase-kde-git-deepin-pamac-nvidia-450-66-libreoffice-7-0/16146/2][Update notes]]
- [[https://forum.manjaro.org/t/cannot-boot-to-rescue-mode-solved/25636][Cannot boot to rescue mode solved]]

** DONE First ox-hugo post                     :org_mode:hugo:@Productivity:
CLOSED: [2020-08-24 Mon 21:51]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: first-ox-hugo-post
:EXPORT_FILE_NAME: index
:END:
*** This is Awesome!

I just installed [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]], an org extension that makes it easy to export org files as hugo posts.

*** Setting Up

On spacemacs it was as easy as adding =ox-hugo= to the list of =dotspacemacs-additional-packages=, along with adding the following to user-config:
#+begin_src elisp
(use-package ox-hugo
  :ensure t          ;Auto-install the package from Melpa (optional)
  :after ox)
#+end_src

Then you're good to go. I'm excited about the way it makes it easy to write posts via org-capture, but I should really be spending more time writing and less time configuring emacs (:

Even though it's easy to setup, I recommend reading through the entire [[https://ox-hugo.scripter.co/][ox-hugo]] documentation, and this [[https://www.shanesveller.com/blog/2018/02/13/blogging-with-org-mode-and-ox-hugo/][blog post]] for more specifics on the workflow.

*** Extra Goodies

I recommend setting up auto-export on saving, org-capture setup.

Personally I like using hugo leaf bundles for all my hugo posts because it helps keep the images organized.


*** Have fun!
** DONE First Thoughts On Org Roam                  :org_mode:roam_research:@Productivity:
CLOSED: [2020-08-24 Mon 22:49]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: first-thoughts-on-org-roam
:EXPORT_FILE_NAME: index
:END:
*** Background

I find myself taking a lot of notes, and was looking for a place to store them.

[[https://roamresearch.com/][Roam Research]] is the big craze these days: "A note-taking tool for networked thought." It seemed like just what I was looking for. It's growing quickly and has a great community. I was going to give it a try when I happened upon [[https://github.com/org-roam/org-roam][org-roam]]: "a Rudimentary Roam replica with Org-mode".

Org-roam seemed like the best of both worlds. I get the benefits of roam research, for free, all from spacemacs! It's in its early stages, but like roam research it is growing very quickly.

This is where my roam graph stands as of today (displayed by =org-roam=server=):
[[file:org-roam-graph-08-24.png]]

*** Installation

Getting setup on spacemacs is straightforward. These are the relevant parts of my config for getting basic org-roam functionality:

#+begin_src elisp
(with-eval-after-load 'org
      (use-package company-org-roam
      :ensure t
      ;; You may want to pin in case the version from stable.melpa.org is not working 
                                        ; :pin melpa
      :config
      (push 'company-org-roam company-backends))

    (require 'org-tempo)
    (require 'org-protocol)
    (require 'org-roam-protocol)
  
  (use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "/home/gautierk/.org/roam/")
      :init
      (progn
        ;; (spacemacs/declare-prefix "af" "org-roam")
        (spacemacs/set-leader-keys
          "afl" 'org-roam
          "aft" 'org-roam-dailies-today
          "aff" 'org-roam-find-file
          "afg" 'org-roam-graph)

        ;; (spacemacs/declare-prefix-for-mode 'org-mode "mr" "org-roam")
        (spacemacs/set-leader-keys-for-major-mode 'org-mode
          "fl" 'org-roam
          "ft" 'org-roam-dailies-today
          "fb" 'org-roam-switch-to-buffer
          "ff" 'org-roam-find-file
          "fi" 'org-roam-insert
          "fI" 'org-roam-insert-immediate
          "fg" 'org-roam-graph)))
  )
#+end_src

If you want to enable [[https://github.com/org-roam/org-roam-server][org-roam-server]], add the following in the =with-eval-after-load 'org= block and make sure emacs server is started:

#+begin_src elisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

*** First Thoughts

I'm probably still in the honey moon phase, so i'll have to revisit these thoughts later, but right now i'm having a blast. It's great that taking notes is as easy as =SPC a f f=, and it's very rewarding to see the org roam graph growing over time. 

I will say that at this point I rarely look at a note i've taken in the past, but even so writing something down helps me think things out, and potentially improves my retention on a topic. Hopefully over time I'll capitalize more on the ability to look at historical notes.
** DONE Moving From GSuite to Migadu     :email_hosting:email:gsuite:migadu:@Productivity:
CLOSED: [2020-08-27 Thu 00:22]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: moving-from-gsuite-to-migadu
:EXPORT_FILE_NAME: index
:END:
Like many things, moving to Migadu from another email hosting provider is a two step process:

1. Deciding that Migadu is the right option for you
2. Making the switch
   
*** Why Migadu

Just recently, Migadu went through a [[https://www.migadu.com/blog/redesign/][redesign]]. Here are some helpful links for learning about their services:
- [[https://www.migadu.com/pricing/][Pricing]]
- [[https://www.migadu.com/procon/][Pros/Cons]]

The points that stuck out most to me:
1. An account can have unlimited mailboxes on a domain at no additional charge.
2. There is a soft limit of 5 registered domains on the micro plan
3. Competitive Pricing

Combining these points, and you're telling me that with the micro plan I get unlimited mailboxes, 5 domains, all for a quarter of the price of a single domain on GSuite? Sign me up! I expect this feature to come in super handy when setting up email accounts on additional domains for side projects.

*** Making the Switch

**** Setup

1. Sign up for Migadu and configure DNS
2. Create a mailbox for yourself

**** Migration

There are several options for migrating mail to migadu. Some popular options are shared [[https://web.archive.org/web/20190602203512/https://www.migadu.com/en/guides/mailtransfer.html][here]].

Personally, I let Luke Smith's [[https://github.com/LukeSmithxyz/mutt-wizard][mutt-wizard]] do most of the heavy lifting. The steps for me were to:
1. Add my new migadu account using mutt-wizard, indicating that I want to store all of my mail locally.
2. Navigate to `~/.local/share/mail` and copy the contents of my previous mail folder my new migadu account folder. This involves changing the names of Gmail specific mailboxes to Migadu mailboxes. i.e. from "[Gmail].All Mail" to "Archive". I also followed [[https://aaronweb.net/blog/2014/11/migrating-mail-between-imap-servers-using-mbsync/][this guide]] to strip the mbsync metadata before sending the mail to the Migadu server.
3. Run `mw sync`

That's it!

*** Enjoy the benefits of Migadu
I lied, there's actually a third step in the process of moving to Migadu: enjoy!

I'm most looking forward to avoiding the headache of setting up domain specific email accouts for side projects. Exciting times lay ahead.
** DONE Syncing Org Files to Dropbox - Access Them From Anywhere :org_mode:@Productivity:
CLOSED: [2020-09-18 Fri 09:00]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: setting-up-org-mode-on-mobile
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-04 Fri 12:17]--[2020-09-04 Fri 13:15] =>  0:58
:END:
By Adding org files to the cloud, you can access them from anywhere (yes, even when you're not at your computer!). This is very useful, especially for accessing org files from a mobile device.

*** Setting Up Dropbox


Create a [[https://www.dropbox.com/h][dropbox]] account and install it on your computer. The Dropbox free tier gives 2GB of storage. On arch you can install with =yay -S dropbox=.

By default, dropbox will create a folder at =~/Dropbox=. Now we need to connect the agenda files to this folder. We can do this with a symlink!

You can have symlinks that link to items both in and outside of your Dropbox account; however, these two types of symlinks sync differently. See [[https://help.dropbox.com/installs-integrations/sync-uploads/symlinks][Dropbox symlink help]].

- If you create a symlink that links to an item in your Dropbox account, we’ll sync the the symlink file at its location and the item that it links to at its location respectively
- If you create a symlink that links to an item outside of your Dropbox account, when you sign in to dropbox.com you’ll only see the symlink file but not the content it links to


This means that we actually have to move the agenda files into the =~/Dropbox= folder, and then create a symlink back to their original location. For me this was easy because because I have a folder designated to storing my agenda files.

#+begin_src bash
mv ~/.org/agenda/ ~/Dropbox
ln -s ~/Dropbox/agenda ~/.org/agenda
#+end_src

There you go, now your org files are synced to your dropbox and can be accessed from anywhere with an internet connection.

*** What Next?

Now that your files are synced to Dropbox, it's super easy to get started with a mobile org program like =Organice= or =Orgzly=. For =Organice= you navigate to [[https://organice.200ok.ch/][https://organice.200ok.ch/]] in a web browser, sign in, and you're done. You can learn more about the differences between =Organice= and =Orgzly= [[https://colekillian.com/snippets/comparing-organice-and-orzly/][here]].

** DONE Comparing Organice and Orzly                :org_mode:@Productivity:
CLOSED: [2020-09-04 Fri 11:58]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: comparing-organice-and-orzly
:EXPORT_FILE_NAME: index
:CATEGORY: Productivity
:END:
I was looking for a way to connect to org mode from my phone. My main goals were to:
- Write todos when away from the computer
- Read todos when away from the computer
- Timetracking when away from the computer

In my search I came across the following possible solutions:
- [[https://github.com/DanielDe/org-web][org-web]] :: org-mode on the web, built with React, optimized for mobile, synced with Dropbox and Google Drive.
- [[https://github.com/200ok-ch/organice][Organice]] :: A community driven fork of org-web with the commitment of a Swiss company behind it.
- [[https://github.com/orgzly/orgzly-android][Orgzly]] :: org-mode on android, a native mobile app.
- [[https://beorgapp.com/][Beorg]] :: org-mode on ios, a native mobile app.
- [[https://news.ycombinator.com/item?id=13829075][Termux]] :: Run emacs from termux on android. Not built with mobile in mind.
- [[https://github.com/bnankiewicz/organic][Organic]] :: org-mode on android, a native mobile app; unmaintained.

For me it was easy to narrow down my choice to Organice and Orgzly (I am on Android). At that point it became difficult to decide so I gave both a try. These are my initial impressions:

*** Organice
**** Pros
 - Capture templates
 - Easy time tracking.
 - Great user experience feel
 - Agenda view
 - Search functionality
 - Support for checkboxes
**** Cons
- Offline support not as good
- No reminders
**** Screenshot
[[file:./organice-mobile-view.png]]

*** Orgzly
**** Pros
- A native android app.
- Reminders for scheduled tasks.
- Agenda view
- Offline Support
- Search functionality
**** Cons
- Not easy to do time tracking from mobile.
- No capture templates.
- User experience not as intuitive.
**** Screenshot
[[file:./orgzly-mobile-view.png]]

*** Conclusion

In deciding, its important to keep in mind the goals for using org mode from mobile.
- Write todos when away from the computer
- Read todos when away from the computer
- Timetracking when away from the computer

In keeping with these goals, I prefer Organice because of the capture templates and time clocking. A nicer user experience is an added bonus. Yes, Orgzly has the advantage of better offline support, but I rarely see myself without access to mobile data. Orgzly has the advantage of reminders for upcoming tasks, but I don't rely on these types of reminders from my mobile device.

Keep in mind these are my initial impressions. My plan is to go with Organice for a few weeks and report back with anything else I notice.

Feel free to leave a comment below!

* Book Notes
:PROPERTIES:
:EXPORT_HUGO_SECTION: book-notes
:END:
** DONE The Way To Willpower By Henry Hazlitt
CLOSED: [2020-12-01 Tue 19:04]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: the-way-to-willpower
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :Score 8 :Thoughts The Way to WillPower was published in 1922, but still packs a ton of super valuable information relating to "will-power". I found many of its ideas useful in my everyday life. It's a relatively quick read, I definitely recommend!
:END:

*** Summary and Notes (By Chapter)
**** A Revelation
Introduces the idea that the will does not exist as another faculty alongside the memory, imagination, and a way to reason.
**** The Intellect as a Valet
Claims that the intellect is responsible for choosing between desires.
**** The Price One Pays
There is a price to be payed for valuing remote desires over present ones.
**** Old Bottles for the New Wine
The will may be defined as our desire to be a certain sort of character. If this desire is strong enough, it can assist your intellect to make decisions that value the future. Will-power may be defined as the ability to keep a remote desire so vividly in mind that immediate desires which interfere with it are not gratified.
**** Resolutions Made and Resolutions Kept
It's problematic that people make too many resolutions and then don't keep them. Instead people should think long and hard about the prices associated with a resolution, and then only make them when they are confident that they can keep them. This helps avoid the demoralizing act of breaking one. 
**** Success and the Capital S
Decide for yourself what "success" means; Don't make the mistake of continually trying to obtain the things that the people around us want or profess to want, rather than what you want yourself, because you have never really tried to examine whether there is any difference between the two. After reflecting on success, decide if you are willing to pay the price to get there. 
**** The Scale of Values
Material values are not the way to go. A man's goal ought to be (beyond the mere duty of making himself happy) to increase social well-being to confer the greatest benefits he can upon humanity. So long as fame and money are the ends sought, the benefits conferred upon humanity are mere by-products; whereas, in any civilization worthy of the name, the ends sought by individuals ought to be social well-being, and fame and money the by-products.
**** Controlling One's Thoughts
Tips for carrrying out resolutions:
- Whatever our ideals, whatever our resolutions, we should, before adopting those resolutions, calmly and coldly count the price of carrying them out. Think not alone of the benefits of keeping the resolve, but of the disadvantages.
- Once you have made your decision, having coldly decided that that is what you want and that you are willing to pay the price, your decision is forever beyond dispute. You should never ask yourself again whether the other course it possible.
- Dwell on the benefits of carrying your resolove out, not on the evils of failing. Fill the mind with the positive idea of your resolve.
- When combating insomnia, don't say to oneself "I shall sleep". Instead say "I sleep".
- Don't defy temptation, instead evade it. Don't do things that trigger desires you don't want.
- After mastering evading temptation, you can start to add it back in. "It breeds great perfection if the practice be harder than the use".
**** The Omnipresence of Habit
Desires and fears are not the sole determinants of action; there is also habit. Habit is the doing of a thing without conscious attention and often without thought of the purpose of doing it.
**** The Alteration of Habit
When you first set about to abolish a bad habit and establish a good one, it is going to take all the effort, all the "will-power", at your command. But habit begins soon to take the place of will-power; it will require less and less effort. You make your nervous system your ally instead of your enemy.

Tips for altering habits:
- In acquisition of a new habit or the leaving off an old one, we must take care to launch ourselves with as strong and decided an initiative as possible. This helps give momentum and postpones a potential breakdown.
- Never suffer an exception to occur till the new habit is securely rotted in your life.
- Seize the very first possible opportunity to act on every resolution you make, and on every emotional prompting you may experience in the direction of the habits you aspire to gain.
- When temptations arise, instead of telling yourself "I will begin to reform the next time", tell yourself that "the last time was the last".
**** Will and The Psychoanalysts
This chapter focuses on discussing how psychoanalysts have it wrong. Points:
- "Whichever your belief you tend to make your belief true".
- There is a difference between a desire and a craving. We have a desire for food, but a craving for cigarettes, whiskey, morphine.
- Oscar Wilde said: "The only way to get rid of a temptation is to yield to it". Like all good epigrams, it is at least true in a special sense. It is true in that if you yield to a temptation, you will get rid of it "for the moment". But everytime you yield you do two things: increase the intensity of the desire and lessen the power of resistance.
- You develop and strengthen the craving by use, just as you develop a muscle by use. Everytime you resist a desire you strengthen your power to resist.
- Makes a point that sexual craving can be fought, that it can be lived down, that it can be conquered, that the conquest of it would immensly strengthen the character, and make most other moral victories comparatively easy. This differs from psychoanalysts who believe "it is not only impossible to conquer the sexual passion, but highly dangerous to try".
**** Concentration
Discusses what to do with your will-power once you have it. Points:
- Minute-to-minute concentration is the ability to keep your mind upon a certain subject for a given period, say for ten minutes, one half hour or two hours without interruption.
- Night-after-night concentration is the ability to specialize in a certain subject or in a certain branch of that subject until you have mastered it thoroughly, before advancing to other subjects.
- Concentration is primarily an act of will (desire of character). It need not necessarily by so. If you enjoy working, getting up early, remaining home nights, staying sober, you will do so without effort. If you are interested in a book or in a particular subject, you will read it or meditate upon it without effort. But you need will-power in action precisely because you do not enjoy doing these commendable things, and you need will-power in reading, thought or writing precisely because your mind will otherwise be distracted by lack of lapses of interest in the subject at hand or by greater interest in something else.
- The act of will involved in concentration is the same in principle as any other act of will
  - We must be certain in your own mind that the end is worth while.
  - There is a price attached to concentration. We will have less time for other things. We must be content to remain somewhat ignorant of the other things, at least for a time.
  - This applies particuarly to night-after-night concentration. If you keep switching subjects, you won't be able to specialize adequately. By trying to know something about everything, you may miss really knowing anything about anything.
  - One needs one's play to keep from going stale, but there are limits to this principle. No man will become an savant from an evening a week. "Most careers are made or marred in the hours after supper".
  - When our mind wanders, we do so because of a half-conscious belief that the new idea, problem or fact needs attending to is important. If it were to truely be important, it would be so only by accident. Nine times out of ten we should find that they are not.
  - Forms of involuntary concentration of which you were not conscious, were possible because the interest in the subject was intense enough. An example is when you are asked a question and don't even notice.
  - When a person is left alone for a short time, he often takes pleasant but uneducative roamings. The only way a man can put a stop to this is to snap off his train of day-dreaming the first moment he becomes aware of it, and to address his mind to some serious subject. If he has never done this, he will find the effort great. But "just do it".
**** A Program of Work
There are some tasks that we don't even see as anything requiring will-power at all, simply because they do not come in the teeth-gritting class, but that we continue to put off anyways. The reasons for this are not being as efficient as we might be, and procrastination from lack of will-power.

Makes an example of a person who decides to devote evenings to the study of money and banking. They could learn it just as well at home as by going to night-school, but the rigidity of night-school means it requires less will-power. Another element is that it is much easier to say to a friend: "I'm sorry I'd like to go, but I have to go to night-school" then it is to say "I'm sorry but I have to stay home and study". Your friend is likely to be skeptical. He may be unable to see than an obligation to yourself is quite as sacred as an obligation to others. But you have to commit anyways and stick to your self-study schedule. Note that it is much easier for the discipline of will-power to plan modestly and to carry out your schedule than to plan greatly and fail. The first builds self-confidence; the second destroys it.
**** The Daily Challenge
Keep the faculty of effort alive in you by a little gratuitous exercise every day. Do every day or two something for no other reason than that you would rather not do it, so that when the hour of dire needs draws nigh, it may find you not unnerved and untrained to stand the test.

There is the practical example of asking for a raise. You know you are worth more money, but you don't have the courage. A test of meeting the challenge is the way you feel at the end of the day. If you have met the challenge, you will be rewarded with a glow of soul; if you have evaded or postponed it, your lot will be a sense of guilt.

Emotion follows action, not the other way around. If you really mean to do it at all, insist upon fixing a definite deadline.

Another case is when you would like to give the answer "No". Yet you fear to give offense; you fear friendship, you fear having to defend your position; you fear embarassment. A man cannot respect himself if he grants a request or gives money to a beggar not because he believes the request is fair, or to relieve the beggar's distress, but simply because he cannot look his supplicant in the eye and tell him No.

There is always the infinitude of bad habits to be broken and good habits to be formed. One example is a cold shower every morning: it is an excellent will exercise, which more than pays for itself in its effects upon your health.
**** Second And Third Winds
There are times when physical and mental fatigue appear to make us quit a task. But eight times out of ten is it flagging interest, rather than real fatigue, which makes us quit. As long as interest is intense enough, physical and mental fatigue won't really matter.

There are two main ways to get past this problem: 
1. Diversification. By turning from one subject to another, you sustain or increase your interest in the subjects.
2. Sheer effort. Trusting that after a time either the interest will rise again or the fatigue will decrease. "Heroism is endurance for one moment more".

This can be a dangerous doctrine that would leave to overwork, overstrain and nervous breakdown. It is possible to overdo it; but for overwhelming majority it is not the slightest danger. Most breakdowns attributed to overwork do not come from overwork, but from worry, dissipation and unhygienic living. Indolence will always find excuses for its own existence.
**** Moral Courage
Final notes before parting from the book:
- Never boast to friends about will-power. They are apt to become cynical and facetious, especially when you have broken some major or minor resolution. You want your friends to know of your will-power, but the best way for them to discover it is through actions, not words.
- Don't be a prig, someone who has become vastly well satisfied with himself. His chief pastime is to talk about the shortcomings of over the people.
- True willpower is perfectly compatible with true humility.
- It is in general more profitable to reckon up our defects than to boast of our attainments. Sad is the day for any man when he becomes absolutely satisfied with the life that he is living, the thoughts that he is thinking and the deeds that he is doing; when there ceases to be forever beating at the doors of his soul a desire to do something larger, which he feels and knows he was meant and inteded to do.
- Don't be stubborn. Don't fancy that will-power is incompatible with making yourself agreeable. A man who stands for principles in which you believe has backbone; a man who stands for principles in which you do not believe is stubborn.
- The man with backbone will never give in because of mere lack of physical and moral courage. Moral courage is the rarest thing on earth. How many had the ecourage merely to make themselves unpopular.
- How can it profit a man to be able to think if he does not dare to. You must have the courage to go where the mind leads, no matter how startling the conclusion. This may require the courage to stand against the whole world.
- Great is the man who has that moral courage, for he indeed has achieved will-power.
  
*** My Top 3 Quotes

- "We may think his ethical ideas mistaken, and mistaken they may be; but we cannot but admire the strength of character which leads him to act them out in spite of social opposition."
- "If your ability to refuse to yield to this particular impulse becomes in your mind a challenge to and a test of your entire character, you have thrown into the scale a mighty force to ensure your taking the right action."
- "Sad is the day for any man when he becomes absolutely satisfied with the life that he is living, the thoughts that he is thinking and the deeds that he is doing; when there ceases to be forever beating at the doors of his soul a desire to do something larger, which he feels and knows he was meant and intended to do."

*** How The Book Changed Me

You would think that a goal of reading the book is to improve your will-power, and that's definitely an effect that it had on me. I find that even just having the words to conceptualize will-power as the desire to be a certain character helps me resist "temptation". I also find the "rules of will-power" to be very helpful:
1. Whatever our ideals, whatever our resolutions, we should, before adopting those resolutions, calmly and coldly count the price of carrying them out. Think not alone of the benefits of keeping the resolve, but of the disadvantages.
2. Once you have made your decision, having coldly decided that that is what you want and that you are willing to pay the price, your decision is forever beyond dispute. You should never ask yourself again whether the other course it possible.

Here i'll list some ways my mindset changed after reading the book:
- More value for the importance of habits
- An appreciation for "Whichever your belief you tend to make your belief true"
- Opened my mind to the perspective that sexual desire can be conquered. I rarely see that point made.
- I related to the example of a person who decides to devote some evenings to studying and the difficulty of telling friends. Previously I would tell myself that I would make up for it by becoming more efficient. But now I'm more inclined to say "No" sometimes. I still see a need for occasional "play to keep from going stale".
- I like the idea of a daily challenge. I already take cold showers, but I'll be introducing some more daily challenges.
- Cool to read the idea of using sheer effort to overcome physical and mental fatigue.
- I have a stronger desire for moral courage than before.
- Just do it.

*** How I Discovered It
I discovered the book through [[https://vasilishynkarenka.com/][Vasili]] who very kindly gifted it to me. Thank you!

*** Time Spent Reading
*Total time: 3:48*
#+begin_src 
:LOGBOOK:
CLOCK: [2020-11-10 Tue 17:16]--[2020-11-10 Tue 18:02] =>  0:46
CLOCK: [2020-11-10 Tue 16:34]--[2020-11-10 Tue 17:16] =>  0:42
CLOCK: [2020-11-09 Mon 11:10]--[2020-11-09 Mon 11:50] =>  0:40
CLOCK: [2020-11-09 Mon 10:28]--[2020-11-09 Mon 11:10] =>  0:42
CLOCK: [2020-11-07 Sat 08:03]--[2020-11-07 Sat 08:22] =>  0:19
CLOCK: [2020-11-06 Fri 15:43]--[2020-11-06 Fri 16:22] =>  0:39
:END:
#+end_src

*** Time Spent Reviewing/Writing

*Total time: 3:19*
#+begin_src 
:LOGBOOK:
CLOCK: [2020-12-01 Tue 13:25]--[2020-12-01 Tue 14:35] =>  1:10
CLOCK: [2020-12-01 Tue 11:06]--[2020-12-01 Tue 13:15] =>  2:09
:END:
#+end_src

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: _about
:EXPORT_HUGO_WEIGHT: auto
:END:
** TODO Site Map
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: site_map
:EXPORT_FILE_NAME: index
:END:

Categories for the site:
- Software_Dev :: Things related To software development.
- Productivity :: Productivity. Computer tweaks. 
- Thoughts :: For thoughts, quick and short.
- Stories :: For stories. Backpacking. Breaking into computer. Similar to thoughts, but story based.

Web Dev is chill. But what if I do something Computer workflow related that helps with web dev? Then put it in both categories. That's fine. Same with productivity.

So "To Take Notes or Not to Take Notes, That is the Question" would go in "Thoughts" and "Productivity".

Need to improve categories.

Web Dev is easy. Everything that aids goes there.

Productivity should follow the same route. Everything that aids productivity goes there.

What about Web Dev Productivity? Web Dev takes preference.

How to distinguish between long and short posts? Don't worry about it. There will be a separate projects section.
** Elaborate on Computer Configuration
I use Manjaro i3.

Emacs for development and organization.
- org-super-agenda
- org-roam
- org-noter
- org-reveal
- evil-org
- org-gcal

Keepmenu
Firefox
St

** DONE What I'm Doing Now
CLOSED: [2020-12-02 Wed 09:47]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: now
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :narrow true
:END:

(This is a [[https://nownownow.com/about][now]] page. If you have your own site, [[https://nownownow.com/about][consider making one too!]])


*** Artifai

I'm leading the development of Artifai. Our goal is to making neural style technology available to non technical users, while streamlining the process for users to purchase their art on a poster/canvas. You can check it out at [[https://firebasestorage.googleapis.com/v0/b/artifai.appspot.com/o/architecture%2FArtifaication%20Pipeline.png?alt=media&token=1634450b-3187-432f-b910-2332856cfe37][https://artif.ai]].

*** McGill

I'm a U2 honors math and computer science at McGill. My list of coursework is [[https://colekillian.com/coursework-overview/][here]].

*** Skills In Progress
(inspired by [[https://jamesbvaughan.com/skills-in-progress/][james vaughan]])

One thing that helps me stay happier and more energized is to always be working on developing a skill. As Willy Wonka says, we have "so much time and so little to do".

**** Current
These are skills that I'm currently working on.

- Fullstack Development
- Competitive Programming
- Acoustic Guitar and Singing
- Writing
- 1 Minute Handstand
- Leadership
- Storytelling

**** Backlog
These are skills that I'm excited to work on, but that I'm not making time for just yet.

- Electric Guitar
- Solve a Rubik's Cube Blindfolded
- YouTube channel
- Straddle Planche
- Reinforcement Learning
- Marathon
  
**** Back-Backlog
These are skills that I hope to get to eventually, but it could be a while.

- Paint
- Piano
- Biology

**** Past
These are skills I have developed in the past.

- Standing Backflip
- Basketball Finger Spin
- 150 Soccer Juggles
- Unicycle
- Magic Card Tricks
- Bike Wheelie
  
** TODO Habits / Rules
- No Phone In Bed or Bathroom
- Cold Showers
- Workout At Least Every Other Day
** DONE About
CLOSED: [2020-12-02 Wed 09:47]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: about
:EXPORT_FILE_NAME: index
:END:

<img src='/images/cole.jpg' title="Cole Killian" style="float: right; border-radius: 50%" width="200px"/>

Hello there! My name is Cole. Currently a U2 Math
<br>
and Computer Science student at McGill.

Excited about the future. I try to spend my free time hiking, <br>
playing guitar, building side projects, reading, writing, <br> and seeing friends. Here's what I'm working on [[/now][now]].

I'd love if you clicked [[mailto:cole@colekillian.com][here]] to let me know what brings <br> you here or if you want grab coffee.

*** Tech
- My daily driver is a ThinkPad T450.
- I run [[https://manjaro.org/][Manjaro]] [[https://i3wm.org/][i3]] ([[https://github.com/Ruborcalor/voidrice][dotfiles]]).
- I live by [[https://www.spacemacs.org/][Spacemacs]] [[https://orgmode.org/][org-mode]].
- I use [[https://apps.ankiweb.net/][Anki]] for things I don't want to forget.
- [[https://www.thunderbird.net/en-US/][Thunderbird]] with [[https://github.com/wshanks/tbkeys][tbkeys]] for checking mail.

*** People
I've learned a lot from a ton of cool and inspiring people. I might not recall all of them but here are some:
- [[http://paulgraham.com/][Paul Graham]]
- [[https://www.nateliason.com][Nat Eliason]]
- [[https://jamesbvaughan.com/][James Vaughan]]
- [[https://aliabdaal.com/][Ali Abdaal]]
- [[https://vasilishynkarenka.com/][Vasili Shynkarenka]]
- [[https://mtlynch.io/][Michael Lynch]]
- [[https://web.evanchen.cc/][Evan Chen]]





* Projects
:PROPERTIES:
:EXPORT_HUGO_SECTION: projects
:EXPORT_HUGO_WEIGHT: auto
:END:

** Artifai
** Age Prediction Via Methylation Data
** Libravos
** McGill OneCard Scraper
** Aspine


* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
